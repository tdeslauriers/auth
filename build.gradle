plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "$micronautPluginVersion"
    id("io.micronaut.test-resources") version "$micronautTestResourcesVersion"
}

version = '0.1'
group = "world.deslauriers"

dockerBuild {
    images = ["tdeslauriers/auth:${project.version}"]
}

dockerBuildNative {
    images = ["tdeslauriers/auth:${project.version}"]
}

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("world.deslauriers.*")
    }
}

dependencies {
    annotationProcessor("io.dekorate:kubernetes-annotations:${dekorateVersion}")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    implementation("io.dekorate:kubernetes-annotations:${dekorateVersion}")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.data:micronaut-data-r2dbc")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.annotation:jakarta.annotation-api")

    // password encoding
    implementation("org.springframework.security:spring-security-crypto:$springSecCryptoVersion")
    implementation("commons-logging:commons-logging:1.2") // spring bcrypt source code impl uses apache commons LogFactory.
    //password validation
    implementation("org.passay:passay:$passayVersion")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("dev.miku:r2dbc-mysql")
    runtimeOnly("mysql:mysql-connector-java")
    runtimeOnly("org.flywaydb:flyway-mysql")

    compileOnly("org.graalvm.nativeimage:svm")

    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:mysql")
    testImplementation("org.testcontainers:testcontainers")

}

application {
    mainClass.set("world.deslauriers.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("world.deslauriers.*")
    }
    testResources {
        additionalModules.add("hibernate-reactive-mariadb")
    }
}

test {
    testLogging{
        events 'standard_out', 'standard_error'
    }
}